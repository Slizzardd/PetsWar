from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

import config.callback_commands as callback_command
from models.type.animal import Animal
from models.type.element_name import ElementName


def get_actions_for_wallet_button(tg_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üêâ –ü—Ä–∏–∑–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞",
                                  callback_data=f"{callback_command.SUMMON_NEW_PET}:{tg_id}")]

        ],
    )


def build_confirm_summon_keyboard(tg_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–∑–≤–∞—Ç—å",
                                     callback_data=f"{callback_command.CONFIRM_SUMMON_NEW_PET}:{tg_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                                     callback_data=f"{callback_command.CANCEL_SUMMON_NEW_PET}:{tg_id}"),
            ]

        ],
    )


def build_actions_after_summon_keyboard(tg_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –ü—Ä–∏–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ",
                                     callback_data=f"{callback_command.CONFIRM_SUMMON_NEW_PET}:{tg_id}")
            ]

        ],
    )


def build_accept_fight_keyboard(duel_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–Ω—è—Ç—å",
                                     callback_data=f"{callback_command.ACCEPT_FIGHT}:{duel_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                     callback_data=f"{callback_command.CANCEL_FIGHT_OFFER}:{duel_id}"),
            ]

        ],
    )


def build_decline_duel(duel_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                     callback_data=f"{callback_command.CANCEL_FIGHT_OFFER}:{duel_id}"),
            ]

        ],
    )


def build_confirm_fight_offer_keyboard(duel_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–≤–µ—Ä–µ–Ω",
                                     callback_data=f"{callback_command.CONFIRM_FIGHT_OFFER}:{duel_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ —É–≤–µ—Ä–µ–Ω",
                                     callback_data=f"{callback_command.CANCEL_FIGHT_OFFER}:{duel_id}"),
            ]

        ],
    )


def build_choose_pet_type() -> ReplyKeyboardMarkup:
    all_russian_types = [animal.value for animal in Animal]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    buttons = [KeyboardButton(text=name) for name in all_russian_types]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        one_time_keyboard=True  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∞–≤—É
    )

    return keyboard


def build_choose_pet_element() -> ReplyKeyboardMarkup:
    all_russian_elements = [element.value for element in ElementName]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    buttons = [KeyboardButton(text=name) for name in all_russian_elements]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=rows,
        resize_keyboard=True,
        one_time_keyboard=True  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∞–≤—É
    )

    return keyboard


def build_actions_in_duel(duel_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–£–¥–∞—Ä–∏—Ç—å",
                                     callback_data=f"{callback_command.KICK_FIGHT}:{duel_id}"),
                InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥",
                                     callback_data=f"{callback_command.MISS_STEP_FIGHT}:{duel_id}"),
            ]

        ],
    )


def generate_link_to_bot() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞",
                url="https://t.me/PetsWar_bot?start=start"
            )
        ]
    ])


def build_actions_for_quest(quest_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                                     callback_data=f"{callback_command.ACCEPT_QUEST}:{quest_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                     callback_data=f"{callback_command.DECLINE_QUEST}:{quest_id}"),
            ]

        ],
    )


def try_complete_quest(quest_id: int, action: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=f"‚úÖ {action}",
                                     callback_data=f"{callback_command.TRYING_COMPLETE}:{quest_id}"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–≤–µ—Å—Ç",
                                     callback_data=f"{callback_command.DECLINE_QUEST}:{quest_id}"),
            ]

        ],
    )
