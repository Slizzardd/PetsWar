from datetime import datetime, timezone, timedelta

import data.main_data as data
from exception.exceptions import FarmTimeNotPassed, BalanceNotFound
from models.farm_data import UserFarmData
from models.user import User
from util.generate_random_helper import get_income_for_farm_coins


async def create_farm(user: User) -> UserFarmData:
    farm_data = await UserFarmData.create(user=user)
    return farm_data


async def update_farm(farm: UserFarmData):
    await farm.save()


async def income_balance(farm: UserFarmData, amount: int) -> UserFarmData:
    farm.balance += amount
    await farm.save()
    return farm


async def make_farm(user_farm_data: UserFarmData) -> tuple[UserFarmData, int]:
    now = datetime.now(timezone.utc)

    # –ü–µ—Ä–≤—ã–π —Ñ–∞—Ä–º ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ä–∞–∑—É
    if user_farm_data.last_farm_time is None:
        income = await get_income_for_farm_coins()
        user_farm_data.last_farm_time = now
        user_farm_data.balance += income
        await user_farm_data.save()
        return user_farm_data, income

    # –°–ª–µ–¥—É—é—â–∏–π —Ñ–∞—Ä–º –ø–æ —Ç–∞–π–º–µ—Ä—É
    next_farm_time = user_farm_data.last_farm_time + data.FARM_COOLDOWN

    if now >= next_farm_time:
        income = await get_income_for_farm_coins()
        user_farm_data.last_farm_time = now
        user_farm_data.balance += income
        await user_farm_data.save()
        return user_farm_data, income

    # –ï—Å–ª–∏ –µ—â–µ —Ä–∞–Ω–æ ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    remaining = next_farm_time - now
    raise FarmTimeNotPassed(get_remaining_time_message(remaining))


def get_remaining_time_message(remaining: timedelta) -> str:
    total_seconds = int(remaining.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60

    return (
        "‚è≥ –§–∞—Ä–º –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
        f"–ü—Ä–æ–π–¥—ë—Ç –µ—â—ë {hours} —á. {minutes} –º–∏–Ω. {seconds} —Å–µ–∫., –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Ñ–∞—Ä–º–∏—Ç—å.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üí™"
    )


def has_enough_balance(user_farm_data: UserFarmData) -> bool:
    try:
        if user_farm_data.balance >= data.PRISE_FOR_SUMMON:
            return True
        else:
            return False
    except Exception:
        raise BalanceNotFound('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞, —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–ø–µ—Ç —Ñ–∞—Ä–º"')
