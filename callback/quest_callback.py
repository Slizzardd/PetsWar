from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery

import config.emoji as ej
import keyboards.keyboards as kb
from config import callback_commands
from facade import quest_facade
from models.type.quest_status import QuestStatus
from util import quest_generate

router = Router()


def get_quest_id_from_request(callback: CallbackQuery) -> int:
    return int(callback.data.split(":")[1])


async def is_user_authorized(callback: CallbackQuery, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –Ω—É–∂–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º"""
    if callback.from_user.id != user_id:
        await callback.answer(f"{ej.ERROR_EMOJI} –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è! {ej.ERROR_EMOJI}", show_alert=True)
        return False
    return True


@router.callback_query(F.data.startswith(f"{callback_commands.ACCEPT_QUEST}"))
async def accept_quest(callback: CallbackQuery):
    quest_id = get_quest_id_from_request(callback)
    quest = await quest_facade.get_quest_by_id(quest_id)
    user = await quest.get_user()
    level = await user.get_level()
    if not await is_user_authorized(callback, user.tg_id):
        return

    quest = await quest_facade.accept_quest(quest)
    await callback.message.reply('–ö–≤–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç, –¥–ª—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, '
                                 '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –õ–° —Å –±–æ—Ç–æ–º')

    chance_to_complete = await quest_generate.get_chance_for_complete_quest(quest.difficulty, level.level)
    await callback.bot.send_message(
        chat_id=user.tg_id,
        text=(
            f"üß≠ –ö–≤–µ—Å—Ç: {quest.title}\n"
            f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {quest.description}\n"
            f"üéØ –¢–∏–ø: {quest.quest_type.value.capitalize()}\n"
            f"üî• –°–ª–æ–∂–Ω–æ—Å—Ç—å: {quest.difficulty}/10\n"
            f"üî• –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–æ–ª-–≤–æ: {quest.amount}\n"
            f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {quest.reward_exp} –æ–ø—ã—Ç–∞, {quest.reward_coins} –ª–∞–ø–∫–æ–∏–Ω–æ–≤\n"
            f"ü§û *–®–∞–Ω—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* {chance_to_complete}%\n"
        ),
        reply_markup=kb.try_complete_quest(quest_id=quest_id, action=quest.action_type),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(F.data.startswith(f"{callback_commands.TRYING_COMPLETE}"))
async def trying_complete(callback: CallbackQuery):
    quest_id = get_quest_id_from_request(callback)
    quest = await quest_facade.get_quest_by_id(quest_id)
    user = await quest.get_user()

    if not await is_user_authorized(callback, user.tg_id):
        return

    if quest.status != QuestStatus.ACCEPTED:
        await callback.answer(f"{ej.ERROR_EMOJI} –≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç! {ej.ERROR_EMOJI}",
                              show_alert=True)
        return

    level = await user.get_level()
    chance = await quest_generate.get_chance_for_complete_quest(quest.difficulty, level.level)
    is_success = await quest_generate.trying_complete(chance)
    if is_success:
        quest = await quest_facade.check_quest(quest)
        if quest.status == QuestStatus.FINISHED:
            text = (
                f"üß≠ –ö–≤–µ—Å—Ç: {quest.title}\n"
                f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {quest.description}\n"
                f"üéØ –¢–∏–ø: {quest.quest_type.value.capitalize()}\n"
                f"üî• –°–ª–æ–∂–Ω–æ—Å—Ç—å: {quest.difficulty}/10\n"
                f"üî• –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quest.amount}\n"
                f"üéÅ –ù–∞–≥—Ä–∞–¥–∞: {quest.reward_exp} –æ–ø—ã—Ç–∞, {quest.reward_coins} –ª–∞–ø–∫–æ–∏–Ω–æ–≤\n"
                f"{ej.STATUS_EMOJI} –°—Ç–∞—Ç—É—Å: {quest.status.value}\n"
                f"–ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã.\n"
                f"–°–ª–µ–¥—É—é—â–∏–π –∫–≤–µ—Å—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ 1 —á–∞—Å."
            )

            await callback.message.answer(text=text)
        else:
            await callback.message.answer(
                f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è!\n"
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {quest.progress} / {quest.amount}",
                parse_mode=ParseMode.HTML,
                reply_markup=kb.try_complete_quest(quest_id=quest_id, action=quest.action_type)
            )

    else:
        await callback.message.answer(
            "üòû –í–∞–º –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –∫–≤–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω.\n"
            "–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å."
        )
        await quest_facade.failed_quest(quest)
    await callback.answer()


@router.callback_query(F.data.startswith(f"{callback_commands.DECLINE_QUEST}"))
async def accept_quest(callback: CallbackQuery):
    quest_id = get_quest_id_from_request(callback)
    quest = await quest_facade.get_quest_by_id(quest_id)
    user = await quest.user

    if not await is_user_authorized(callback, user.tg_id):
        return

    if quest.status != QuestStatus.ACCEPTED:
        await callback.answer(f"{ej.ERROR_EMOJI} –≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç! {ej.ERROR_EMOJI}",
                              show_alert=True)
        return

    quest = await quest_facade.decline_quest(quest)
    await callback.message.answer('–ö–≤–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω')
    await callback.answer()
